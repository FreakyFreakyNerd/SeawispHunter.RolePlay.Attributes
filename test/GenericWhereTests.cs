
/* Original code[1] Copyright (c) 2022 Shane Celis[2]
   Licensed under the MIT License[3]

   This comment generated by code-cite[3].

   [1]: https://github.com/shanecelis/SeawispHunter.RolePlay.Attributes
   [2]: https://twitter.com/shanecelis
   [3]: https://opensource.org/licenses/MIT
   [4]: https://github.com/shanecelis/code-cite
*/

using System;
using System.Linq;
using System.Threading;
using Xunit;

using SeawispHunter.RolePlay.Attributes;
namespace SeawispHunter.RolePlay.Attributes.Test {
  public class A {
    public static int M<T>(T item) where T : struct => 0;
    // public static int M<T>(T item) where T : class => 1;
  }

  public class GenericWhereTests {
    [Fact] public void TestWhereExclusions() {
    Assert.Equal(0, A.M<float>(1f));

    }

    [Fact] public void TestDescription() {
    var b = new B { description = "b" };
    var c = new C();
    var i = (IHasDescription) b;

    Assert.Equal("b", i.Description());
    Assert.Equal("b", b.Description());
    // Assert.Equal("SeawispHunter.RolePlay.Attributes.Test.B", ((object) b).Description());
    Assert.Equal("b", ((object) b).Description());
    Assert.Equal("C", c.Description());

    }

  }

  public interface IHasDescription {
    string description { get; }
  }
  public class B : IHasDescription {
    public string description { get; set; }
  }
  public class C {
    public override string ToString() => "C";
  }

  public static class DescriptionExtensions {
    public static string Description(this object o)
      => (o is IHasDescription d)
        ? d.description
        : o.ToString();
  }


}
