/* Original code[1] Copyright (c) 2022 Shane Celis[2]
   Licensed under the MIT License[3]

   This comment generated by code-cite[3].

   [1]: https://github.com/shanecelis/SeawispHunter.RolePlay.Attributes
   [2]: https://twitter.com/shanecelis
   [3]: https://opensource.org/licenses/MIT
   [4]: https://github.com/shanecelis/code-cite
*/
using Xunit;

using System;
using SeawispHunter.RolePlay.Attributes;
namespace SeawispHunter.RolePlay.Attributes.Test {

public class ReadmeTest {


  [Fact]
  public void TestExample1() {
    var health = new ModifiableValue<float> { baseValue = 100f };
    Assert.Equal(100f, health.value);
    health.modifiers.Add(Modifier.Times(1.10f));
    // Console.WriteLine($"Health is {health.value}."); // Prints: Health is 110.
    Assert.Equal(110f, health.value);
    health.modifiers.Add(Modifier.Plus(5f, "+5 health"));
    // Console.WriteLine($"Health is {health.value}."); // Prints: Health is 115.
    Assert.Equal(115f, health.value);
  }

  [Fact]
  public void TestExample2() {
    int notificationCount = 0;
    var health = new ModifiableValue<float> { baseValue = 100f };
    // health.PropertyChanged += (_, _) => Console.WriteLine($"Health is {health.value}.");
    health.PropertyChanged += (_, _) => notificationCount++;
    Assert.Equal(0, notificationCount);
    health.modifiers.Add(Modifier.Times(1.10f));
    // Prints: Health is 110.
    Assert.Equal(110f, health.value);
    Assert.Equal(1, notificationCount);
    health.modifiers.Add(Modifier.Plus(5f, "+5 health"));
    // Prints: Health is 115.
    Assert.Equal(115f, health.value);
    Assert.Equal(2, notificationCount);
  }

  [Fact]
  public void TestExample3() {
    int notificationCount = 0;
    var maxHealth = new ModifiableValue<float> { baseValue = 100f };
    var health = ModifiableValue.FromValue(maxHealth);
    var damage = Modifier.Minus(new Value<float>());

    // health.PropertyChanged += (_, _) => Console.WriteLine($"Health is {health.value}.");
    health.PropertyChanged += (_, _) => notificationCount++;
    Assert.Equal(0, notificationCount);
    Assert.Equal(100f, health.value);
    Assert.Equal(100f, maxHealth.value);

    health.modifiers.Add(damage);
    // Nothing has changed to the value, but we still receive a notification.
    Assert.Equal(1, notificationCount);
    Assert.Equal(100f, health.value);
    Assert.Equal(100f, maxHealth.value);
    health.modifiers.Add(priority: 100, Modifier.FromFunc((float x) => Math.Clamp(x, 0, maxHealth.value)));
    Assert.Equal(2, notificationCount);
    // Prints: Health is 100.
    damage.context.value = 10f;
    // Prints: Health is 90.
    Assert.Equal(3, notificationCount);
    Assert.Equal(90f, health.value);
    Assert.Equal(100f, maxHealth.value);

    maxHealth.modifiers.Add(Modifier.Plus(20f, "+20 level gain"));
    // Prints: Health is 110/120.
    Assert.Equal(4, notificationCount);
    Assert.Equal(110f, health.value);
    Assert.Equal(120f, maxHealth.value);

    damage.context.value = 1000f;
    Assert.Equal(5, notificationCount);
    Assert.Equal(0f, health.value);
    Assert.Equal(120f, maxHealth.value);
  }

  [Fact]
  public void TestExampleMoon() {
    var moonArmor = new ModifiableValue<float> { baseValue = 20f };
    moonArmor.modifiers.Add(Modifier.FromFunc((float x) => DateTime.Now.IsFullMoon() ? 2 * x : x));
    Assert.Equal(20f, moonArmor.value);
    try {
      Extensions.isFullMoon = true;
      Assert.Equal(40f, moonArmor.value);
    } finally {
      Extensions.isFullMoon = false;
    }
  }
}

public static class Extensions {
  public static bool isFullMoon = false;
  public static bool IsFullMoon(this DateTime d) => isFullMoon;
}
}
