
/* Original code[1] Copyright (c) 2022 Shane Celis[2]
   Licensed under the MIT License[3]

   This comment generated by code-cite[3].

   [1]: https://github.com/shanecelis/SeawispHunter.RolePlay.Attributes
   [2]: https://twitter.com/shanecelis
   [3]: https://opensource.org/licenses/MIT
   [4]: https://github.com/shanecelis/code-cite
*/

using System;
using System.Linq;
using System.Threading;
using Xunit;

using SeawispHunter.RolePlay.Attributes;
namespace SeawispHunter.RolePlay.Attributes.Test {

public class ModifierTest {

  [Fact] public void TestModifierFuncName() {
    // This trick works in dotnet core, not in Unity 2021.3 though.
    var m = Modifier.FromFunc((int x) => x + 1);
    Assert.Equal("(int x) => x + 1", m.ToString());

    var n = Modifier.FromFunc((int x) => x + 1, "+1 strength");
    Assert.Equal("+1 strength", n.ToString());
  }

  [Fact] public void TestCovariance() {
    IModifier<IValue<int>,int> m = Modifier.Plus(new Value<int>(1));
    Assert.True(m is IModifier<IValue<int>, int>);
    Assert.True(m is IModifier<IReadOnlyValue<int>, int>);
    IModifier<IReadOnlyValue<int>, int> n = (IModifier<IReadOnlyValue<int>, int>) m;
    Assert.True(n is IModifier<IReadOnlyValue<int>, int>);
  }

}
}
