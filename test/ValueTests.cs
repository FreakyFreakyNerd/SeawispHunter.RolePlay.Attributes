
/* Original code[1] Copyright (c) 2022 Shane Celis[2]
   Licensed under the MIT License[3]

   This comment generated by code-cite[3].

   [1]: https://github.com/shanecelis/SeawispHunter.RolePlay.Attributes
   [2]: https://twitter.com/shanecelis
   [3]: https://opensource.org/licenses/MIT
   [4]: https://github.com/shanecelis/code-cite
*/

using System;
using System.Linq;
using System.Threading;
using Xunit;

using SeawispHunter.RolePlay.Attributes;
namespace SeawispHunter.RolePlay.Attributes.Test {

public class ValueTests {
  Value<int> a = new Value<int>();
  [Fact] public void TestValueSelect() {
    var b = a.Select(x => x + 1, (v, x) => v.value = x - 1);
    Assert.Equal(0, a.value);
    Assert.Equal(1, b.value);
    a.value = 2;

    Assert.Equal(2, a.value);
    Assert.Equal(3, b.value);
    b.value = 3;
    Assert.Equal(2, a.value);
    Assert.Equal(3, b.value);
    b.value = 4;
    Assert.Equal(3, a.value);
    Assert.Equal(4, b.value);
  }

  [Fact] public void TestBoundedValue() {
    var v = ModifiableValue.FromValue(Value.WithBounds(100f, 0f, 100f));
    v.modifiers.Add(Modifier.Plus(10f));
    Assert.Equal(110f, v.value);
  }

}
}
