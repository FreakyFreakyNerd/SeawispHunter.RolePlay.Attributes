/* Original code[1] Copyright (c) 2022 Shane Celis[2]
   Licensed under the MIT License[3]

   This comment generated by code-cite[3].

   [1]: https://github.com/shanecelis/SeawispHunter.RolePlay.Attributes
   [2]: https://twitter.com/shanecelis
   [3]: https://opensource.org/licenses/MIT
   [4]: https://github.com/shanecelis/code-cite
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Threading;
using System.Runtime.CompilerServices;
using System.Numerics;


namespace SeawispHunter.RolePlay.Attributes {

public static class Modifier {
  public static IModifier<T> Create<T>(Func<T,T> func,
                                       out Action callOnChange,
                                       [CallerArgumentExpression("func")]
                                       string funcExpression = null)
    => new FuncModifier<T>(func, out callOnChange) { name = funcExpression };

  /** Create a modifier from the given function.

      var m = Modifier.Create((int x) => x + 1);
      Console.WriteLine($"m = {m}"); // Prints: m = (int x) => x + 1
    */
  public static IModifier<T> Create<T>(Func<T,T> func,
                                       [CallerArgumentExpression("func")]
                                       string funcExpression = null)
    => new FuncModifier<T>(func) { name = funcExpression };

  internal class FuncModifier<T> : ContextModifier<Func<T,T>, T> {
    public FuncModifier(Func<T,T> func, out Action callOnChange) : this(func) {
      callOnChange = () => OnChange(nameof(context));
    }
    public FuncModifier(Func<T,T> func) : base(func) {}

    public override T Modify(T given) => context(given);
    public override string ToString() => name ?? "?f()";
  }

  public static void EnableAfter<T>(this IModifier<T> modifier, TimeSpan timeSpan) {
    var timer = new Timer(Enable, modifier, timeSpan, Timeout.InfiniteTimeSpan);
    void Enable(object modifier) => ((IModifier<T>) modifier).enabled = true;
  }
  
  public static void DisableAfter<T>(this IModifier<T> modifier, TimeSpan timeSpan) {
    var timer = new Timer(Disable, modifier, timeSpan, Timeout.InfiniteTimeSpan);
    void Disable(object modifier) => ((IModifier<T>) modifier).enabled = false;
  }

  public static IModifier<S,T> WithContext<S,T>(this IModifier<T> modifier, S context)
    => new WrappedModifier<S,T>(context, modifier);

  internal class WrappedModifier<S,T> : ContextModifier<S,T>, IDecorator<IModifier<T>> {
    protected IModifier<T> inner;
    public IModifier<T> decorated => inner;
    public override bool enabled {
      get => inner.enabled;
      set => inner.enabled = value;
    }
    public WrappedModifier(S context, IModifier<T> inner) : base(context) {
      this.inner = inner;
      this.inner.PropertyChanged += Chain;
    }
    public override T Modify(T given) => inner.Modify(given);
    public override string ToString() => inner.ToString();
  }

  public static ITarget<IList<IModifiableValue<T>>,T> TargetList<T>(this IModifier<T> modifier,
                                                                              int index,
                                                                              [CallerArgumentExpression("index")]
                                                                              string name = null) {
    return new ListTarget<T> { modifier = modifier, context = index, name = name };
  }

  public static ITarget<IDictionary<K,IModifiableValue<T>>,T> TargetDictionary<K,T>(this IModifier<T> modifier,
                                                                                              K key,
                                                                                              [CallerArgumentExpression("key")]
                                                                                              string name = null)
    => new DictionaryTarget<K,T> { modifier = modifier, context = key, name = name };

  public static ITarget<S,T> Target<S,T>(this IModifier<T> modifier,
                                                    Func<S,IModifiableValue<T>> target,
                                                   string name = null)
    => new FuncTarget<S,T> { modifier = modifier, context = target, name = name };

  internal abstract class BaseTarget<R,S,T> : ITarget<S, T> {
    public string name { get; init; }
    public R context { get; init; }
    // internal Func<S,IModifiableValue<T>> target { get; init; }
    public IModifier<T> modifier { get; init; }
    public abstract IModifiable<T> AppliesTo(S bag);
    public virtual string defaultName => context.ToString();
    public override string ToString() => name ?? defaultName;
  }

  /* The problem here is we don't know what this applies too. It's an opaque type. */
  internal class FuncTarget<S,T> : BaseTarget<Func<S,IModifiableValue<T>>,S, T> {
    public override IModifiable<T> AppliesTo(S bag) => context(bag);
  }

  internal class ListTarget<T> : BaseTarget<int, IList<IModifiableValue<T>>, T> {
    public override IModifiable<T> AppliesTo(IList<IModifiableValue<T>> bag) => bag[context];
  }

  internal class DictionaryTarget<K,T> : BaseTarget<K, IDictionary<K,IModifiableValue<T>>, T> {
    public override IModifiable<T> AppliesTo(IDictionary<K,IModifiableValue<T>> bag) => bag[context];
  }

  // Plus
  public static IModifier<IReadOnlyValue<S>,S> Plus<S>(S v, string name = null) where S : INumber<S>
    => Plus(new ReadOnlyValue<S>(v), name);

  public static IModifier<IReadOnlyValue<S>,S> Plus<S>(IReadOnlyValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IReadOnlyValue<S>,S>(v) { name = name, symbol = '+' };

  public static IModifier<IValue<S>,S> Plus<S>(IValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IValue<S>,S>(v) { name = name, symbol = '+' };

  // Times
  public static IModifier<IReadOnlyValue<S>,S> Times<S>(S v, string name = null) where S : INumber<S>
    => Times(new ReadOnlyValue<S>(v), name);

  public static IModifier<IReadOnlyValue<S>,S> Times<S>(IReadOnlyValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IReadOnlyValue<S>,S>(v) { name = name, symbol = '*' };

  public static IModifier<IValue<S>,S> Times<S>(IValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IValue<S>,S>(v) { name = name, symbol = '*' };

  // Minus
  public static IModifier<IReadOnlyValue<S>,S> Minus<S>(S v, string name = null) where S : INumber<S>
    => Minus(new ReadOnlyValue<S>(v), name);

  public static IModifier<IReadOnlyValue<S>,S> Minus<S>(IReadOnlyValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IReadOnlyValue<S>,S>(v) { name = name, symbol = '-' };

  public static IModifier<IValue<S>,S> Minus<S>(IValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IValue<S>,S>(v) { name = name, symbol = '-' };


  // Divide
  public static IModifier<IReadOnlyValue<S>,S> Divide<S>(S v, string name = null) where S : INumber<S>
    => Divide(new ReadOnlyValue<S>(v), name);

  public static IModifier<IReadOnlyValue<S>,S> Divide<S>(IReadOnlyValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IReadOnlyValue<S>,S>(v) { name = name, symbol = '/' };

  public static IModifier<IValue<S>,S> Divide<S>(IValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IValue<S>,S>(v) { name = name, symbol = '/' };

  // Substitute
  public static IModifier<IReadOnlyValue<S>,S> Substitute<S>(S v, string name = null) where S : INumber<S>
    => Substitute(new ReadOnlyValue<S>(v), name);

  public static IModifier<IReadOnlyValue<S>,S> Substitute<S>(IReadOnlyValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IReadOnlyValue<S>,S>(v) { name = name, symbol = '=' };

  public static IModifier<IValue<S>,S> Substitute<S>(IValue<S> v, string name = null) where S : INumber<S>
    => new NumericalModifier<IValue<S>,S>(v) { name = name, symbol = '=' };

/** Cast a numerical type into something else. */
  internal class CastingModifier<S,T> : ContextModifier<IModifier<S>,T>
#if NET7_0_OR_GREATER
    where S : INumber<S>
    where T : INumber<T>
#endif
  {
    public CastingModifier(IModifier<S> context) : base(context) { }

#if NET7_0_OR_GREATER
    public override T Modify(T given)
      => T.CreateChecked(context.Modify(S.CreateChecked(given)));
#else
    public override T Modify(T given) {
      var s = GetOp<S>();
      var t = GetOp<T>();
      return t.Create(context.Modify(s.Create(given)));
    }
#endif
  }
}

/** An abstract modifier that keeps a particular context about it.

    If that context implements `INotifyPropertyChanged`, its events will provoke
    this modifier's PropertyChanged events.
  */
public abstract class ContextModifier<S,T> : IModifier<S,T>, IDisposable {
  public string name { get; init; }
  private bool _enabled = true;
  public virtual bool enabled {
    get => _enabled;
    set {
      if (_enabled == value)
        return;
      _enabled = value;
      OnChange(nameof(enabled));
    }
  }
  public S context { get; }

  public event PropertyChangedEventHandler PropertyChanged;

  public ContextModifier(S context) {
    if (context is INotifyPropertyChanged notify)
      notify.PropertyChanged += Chain;
    this.context = context;
  }

  protected void OnChange(string name) {
    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
  }

  internal void Chain(object sender, PropertyChangedEventArgs args) => OnChange(nameof(context));

  public abstract T Modify(T given);

  public void Dispose() {
    if (context is INotifyPropertyChanged notify)
      notify.PropertyChanged -= Chain;
  }

  public override string ToString() {
    var builder = new StringBuilder();
    if (name != null) {
      builder.Append('"');
      builder.Append(name);
      builder.Append('"');
      builder.Append(' ');
    }

    builder.Append(context);
    return builder.ToString();
  }
}


  public class NumericalModifier<S,T> : ContextModifier<S,T>
    where S : IReadOnlyValue<T>
    where T : INumber<T>
  {
    public char symbol { get; init; } = '?';
    public NumericalModifier(S context) : base(context) { }

    public override T Modify(T given) {
      T v = context.value;
      switch (symbol) {
        case '+':
          return given + v;
        case '-':
          return given - v;
        case '*':
          return given * v;
        case '/':
          return given / v;
        case '=':
          return v;
        default:
          throw new NotImplementedException();
      }
    }

    public override string ToString() {
      var builder = new StringBuilder();
      // builder.Append("ref ");
      if (name != null) {
        builder.Append('"');
        builder.Append(name);
        builder.Append('"');
        builder.Append(' ');
      }
      builder.Append(symbol);

      builder.Append(context);
      return builder.ToString();
    }
  }

  public static class TargetedModifierExtensions {
    public static void AddTo<S,T>(this ITarget<S,T> applicator, S bag)
      => applicator.AppliesTo(bag).modifiers.Add(applicator.modifier);
    public static bool RemoveFrom<S,T>(this ITarget<S,T> applicator, S bag)
      => applicator.AppliesTo(bag).modifiers.Remove(applicator.modifier);
    public static bool ContainedIn<S,T>(this ITarget<S,T> applicator, S bag)
      => applicator.AppliesTo(bag).modifiers.Contains(applicator.modifier);
  }
}


