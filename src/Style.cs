/* Original code[1] Copyright (c) 2022 Shane Celis[2]
   Licensed under the MIT License[3]

   This comment generated by code-cite[3].

   [1]: https://github.com/shanecelis/SeawispHunter.RolePlay.Attributes
   [2]: https://twitter.com/shanecelis
   [3]: https://opensource.org/licenses/MIT
   [4]: https://github.com/shanecelis/code-cite
*/

#if NET6_0_OR_GREATER
using System.Numerics;
#endif
using System;

namespace SeawispHunter.RolePlay.Attributes {

/** This stat class represents the style of stat altering presented by Daniel
    Sidhion in this article[1].

    Currently this class only works with float and int but other numerical types
    can be easily added.

    [1]: https://gamedevelopment.tutsplus.com/tutorials/using-the-composite-design-pattern-for-an-rpg-attributes-system--gamedev-243
*/
public class SidhionStat<T> : ModifiableValue<T>
#if NET6_0_OR_GREATER
  where T : INumber<T>
#endif
{
  public IModifiableValue<T> rawBonusesPlus = new ModifiableValue<T>();
  public IModifiableValue<T> rawBonusesMultiply = new ModifiableValue<T>() {
    baseValue = one
  };
  public IModifiableValue<T> finalBonusesPlus = new ModifiableValue<T>();
  public IModifiableValue<T> finalBonusesMultiply = new ModifiableValue<T>() {
    baseValue = one
  };

  public SidhionStat() {
    modifiers.Add(Modifier.Plus<T,T>(rawBonusesPlus));
    modifiers.Add(Modifier.Times<T,T>(rawBonusesMultiply));
    modifiers.Add(Modifier.Plus<T,T>(finalBonusesPlus));
    modifiers.Add(Modifier.Times<T,T>(finalBonusesMultiply));
  }

#if NET6_0_OR_GREATER
  private static T one => T.One;
#else
  private static T one => Modifier.GetOp<T>().one;
#endif
}

}
